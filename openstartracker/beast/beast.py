# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _beast
else:
    import _beast

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PI = _beast.PI
TWOPI = _beast.TWOPI

def load_config(filename: "char const *") -> "void":
    return _beast.load_config(filename)

def xyz_hash(x: "float", y: "float", z: "float") -> "size_t":
    return _beast.xyz_hash(x, y, z)

def xyz_hash_mask(radians: "float") -> "size_t":
    return _beast.xyz_hash_mask(radians)
class star(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_beast.star_x_get, _beast.star_x_set)
    y = property(_beast.star_y_get, _beast.star_y_set)
    z = property(_beast.star_z_get, _beast.star_z_set)
    flux = property(_beast.star_flux_get, _beast.star_flux_set)
    id = property(_beast.star_id_get, _beast.star_id_set)
    px = property(_beast.star_px_get, _beast.star_px_set)
    py = property(_beast.star_py_get, _beast.star_py_set)
    unreliable = property(_beast.star_unreliable_get, _beast.star_unreliable_set)
    star_idx = property(_beast.star_star_idx_get, _beast.star_star_idx_set)
    sigma_sq = property(_beast.star_sigma_sq_get, _beast.star_sigma_sq_set)
    hash_val = property(_beast.star_hash_val_get, _beast.star_hash_val_set)

    def __init__(self, *args):
        _beast.star_swiginit(self, _beast.new_star(*args))

    def __eq__(self, s: "star") -> "bool":
        return _beast.star___eq__(self, s)

    def __mul__(self, s: "star") -> "float":
        return _beast.star___mul__(self, s)

    def DBG_(self, s: "char const *") -> "void":
        return _beast.star_DBG_(self, s)
    __swig_destroy__ = _beast.delete_star

# Register star in _beast:
_beast.star_swigregister(star)
cvar = _beast.cvar


def star_gt_x(s1: "star", s2: "star") -> "bool":
    return _beast.star_gt_x(s1, s2)

def star_gt_y(s1: "star", s2: "star") -> "bool":
    return _beast.star_gt_y(s1, s2)

def star_gt_z(s1: "star", s2: "star") -> "bool":
    return _beast.star_gt_z(s1, s2)

def star_gt_flux(s1: "star", s2: "star") -> "bool":
    return _beast.star_gt_flux(s1, s2)

def star_lt_x(s1: "star", s2: "star") -> "bool":
    return _beast.star_lt_x(s1, s2)

def star_lt_y(s1: "star", s2: "star") -> "bool":
    return _beast.star_lt_y(s1, s2)

def star_lt_z(s1: "star", s2: "star") -> "bool":
    return _beast.star_lt_z(s1, s2)

def star_lt_flux(s1: "star", s2: "star") -> "bool":
    return _beast.star_lt_flux(s1, s2)
class star_db(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_variance = property(_beast.star_db_max_variance_get, _beast.star_db_max_variance_set)

    def __init__(self):
        _beast.star_db_swiginit(self, _beast.new_star_db())
    __swig_destroy__ = _beast.delete_star_db

    def size(self) -> "size_t":
        return _beast.star_db_size(self)

    def __iadd__(self, *args) -> "star_db *":
        return _beast.star_db___iadd__(self, *args)

    def __sub__(self, s: "star_db") -> "star_db *":
        return _beast.star_db___sub__(self, s)

    def __and__(self, s: "star_db") -> "star_db *":
        return _beast.star_db___and__(self, s)

    def get_star(self, idx: "int") -> "star *":
        return _beast.star_db_get_star(self, idx)

    def copy(self) -> "star_db *":
        return _beast.star_db_copy(self)

    def copy_n_brightest(self, n: "size_t") -> "star_db *":
        return _beast.star_db_copy_n_brightest(self, n)

    def load_catalog(self, catalog: "char const *", year: "float") -> "void":
        return _beast.star_db_load_catalog(self, catalog, year)

    def count(self, *args) -> "size_t":
        return _beast.star_db_count(self, *args)

    def DBG_(self, s: "char const *") -> "void":
        return _beast.star_db_DBG_(self, s)

# Register star_db in _beast:
_beast.star_db_swigregister(star_db)

class star_fov(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get_score(self, *args) -> "float":
        return _beast.star_fov_get_score(self, *args)

    def get_id(self, px: "float", py: "float") -> "int":
        return _beast.star_fov_get_id(self, px, py)

    def __init__(self, s: "star_db", db_max_variance_: "float"):
        _beast.star_fov_swiginit(self, _beast.new_star_fov(s, db_max_variance_))
    __swig_destroy__ = _beast.delete_star_fov

# Register star_fov in _beast:
_beast.star_fov_swigregister(star_fov)

class star_query(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    map = property(_beast.star_query_map_get, _beast.star_query_map_set)
    map_size = property(_beast.star_query_map_size_get, _beast.star_query_map_size_set)
    kdresults = property(_beast.star_query_kdresults_get, _beast.star_query_kdresults_set)

    def __init__(self, s: "star_db"):
        _beast.star_query_swiginit(self, _beast.new_star_query(s))
    __swig_destroy__ = _beast.delete_star_query

    def is_kdsorted(self) -> "uint8_t":
        return _beast.star_query_is_kdsorted(self)

    def kdsort(self) -> "void":
        return _beast.star_query_kdsort(self)

    def sort(self) -> "void":
        return _beast.star_query_sort(self)

    def r_size(self) -> "size_t":
        return _beast.star_query_r_size(self)

    def get_kdmask(self, i: "size_t") -> "int8_t":
        return _beast.star_query_get_kdmask(self, i)

    def reset_kdmask(self) -> "void":
        return _beast.star_query_reset_kdmask(self)

    def clear_kdresults(self) -> "void":
        return _beast.star_query_clear_kdresults(self)

    def kdcheck(self, idx: "int", x: "float", y: "float", z: "float", r: "float", min_flux: "float") -> "void":
        return _beast.star_query_kdcheck(self, idx, x, y, z, r, min_flux)

    def kdsearch(self, *args) -> "void":
        return _beast.star_query_kdsearch(self, *args)

    def kdsearch_x(self, x: "float const", y: "float const", z: "float const", r: "float const", min_flux: "float", min: "int", max: "int") -> "void":
        return _beast.star_query_kdsearch_x(self, x, y, z, r, min_flux, min, max)

    def kdsearch_y(self, x: "float const", y: "float const", z: "float const", r: "float const", min_flux: "float", min: "int", max: "int") -> "void":
        return _beast.star_query_kdsearch_y(self, x, y, z, r, min_flux, min, max)

    def kdsearch_z(self, x: "float const", y: "float const", z: "float const", r: "float const", min_flux: "float", min: "int", max: "int") -> "void":
        return _beast.star_query_kdsearch_z(self, x, y, z, r, min_flux, min, max)

    def kdmask_filter_catalog(self) -> "void":
        return _beast.star_query_kdmask_filter_catalog(self)

    def kdmask_uniform_density(self, min_stars_per_fov: "int") -> "void":
        return _beast.star_query_kdmask_uniform_density(self, min_stars_per_fov)

    def from_kdmask(self) -> "star_db *":
        return _beast.star_query_from_kdmask(self)

    def from_kdresults(self) -> "star_db *":
        return _beast.star_query_from_kdresults(self)

    def DBG_(self, s: "char const *") -> "void":
        return _beast.star_query_DBG_(self, s)

# Register star_query in _beast:
_beast.star_query_swigregister(star_query)

class constellation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p = property(_beast.constellation_p_get, _beast.constellation_p_set)
    s1 = property(_beast.constellation_s1_get, _beast.constellation_s1_set)
    s2 = property(_beast.constellation_s2_get, _beast.constellation_s2_set)
    idx = property(_beast.constellation_idx_get, _beast.constellation_idx_set)

    def DBG_(self, s: "char const *") -> "void":
        return _beast.constellation_DBG_(self, s)

    def __init__(self):
        _beast.constellation_swiginit(self, _beast.new_constellation())
    __swig_destroy__ = _beast.delete_constellation

# Register constellation in _beast:
_beast.constellation_swigregister(constellation)

class constellation_pair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    totalscore = property(_beast.constellation_pair_totalscore_get, _beast.constellation_pair_totalscore_set)
    db_s1 = property(_beast.constellation_pair_db_s1_get, _beast.constellation_pair_db_s1_set)
    db_s2 = property(_beast.constellation_pair_db_s2_get, _beast.constellation_pair_db_s2_set)
    img_s1 = property(_beast.constellation_pair_img_s1_get, _beast.constellation_pair_img_s1_set)
    img_s2 = property(_beast.constellation_pair_img_s2_get, _beast.constellation_pair_img_s2_set)

    def flip(self) -> "void":
        return _beast.constellation_pair_flip(self)

    def DBG_(self, s: "char const *") -> "void":
        return _beast.constellation_pair_DBG_(self, s)

    def __init__(self):
        _beast.constellation_pair_swiginit(self, _beast.new_constellation_pair())
    __swig_destroy__ = _beast.delete_constellation_pair

# Register constellation_pair in _beast:
_beast.constellation_pair_swigregister(constellation_pair)

class constellation_lt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, c1: "constellation", c2: "constellation") -> "bool":
        return _beast.constellation_lt___call__(self, c1, c2)

    def __init__(self):
        _beast.constellation_lt_swiginit(self, _beast.new_constellation_lt())
    __swig_destroy__ = _beast.delete_constellation_lt

# Register constellation_lt in _beast:
_beast.constellation_lt_swigregister(constellation_lt)


def constellation_lt_s1(c1: "constellation", c2: "constellation") -> "bool":
    return _beast.constellation_lt_s1(c1, c2)

def constellation_lt_s2(c1: "constellation", c2: "constellation") -> "bool":
    return _beast.constellation_lt_s2(c1, c2)

def constellation_lt_p(c1: "constellation", c2: "constellation") -> "bool":
    return _beast.constellation_lt_p(c1, c2)
class constellation_db(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stars = property(_beast.constellation_db_stars_get, _beast.constellation_db_stars_set)
    results = property(_beast.constellation_db_results_get, _beast.constellation_db_results_set)
    map_size = property(_beast.constellation_db_map_size_get, _beast.constellation_db_map_size_set)
    map = property(_beast.constellation_db_map_get, _beast.constellation_db_map_set)

    def __init__(self, s: "star_db", stars_per_fov: "int", from_image: "int"):
        _beast.constellation_db_swiginit(self, _beast.new_constellation_db(s, stars_per_fov, from_image))
    __swig_destroy__ = _beast.delete_constellation_db

    def DBG_(self, s: "char const *") -> "void":
        return _beast.constellation_db_DBG_(self, s)

# Register constellation_db in _beast:
_beast.constellation_db_swigregister(constellation_db)

class match_result(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    R11 = property(_beast.match_result_R11_get, _beast.match_result_R11_set)
    R12 = property(_beast.match_result_R12_get, _beast.match_result_R12_set)
    R13 = property(_beast.match_result_R13_get, _beast.match_result_R13_set)
    R21 = property(_beast.match_result_R21_get, _beast.match_result_R21_set)
    R22 = property(_beast.match_result_R22_get, _beast.match_result_R22_set)
    R23 = property(_beast.match_result_R23_get, _beast.match_result_R23_set)
    R31 = property(_beast.match_result_R31_get, _beast.match_result_R31_set)
    R32 = property(_beast.match_result_R32_get, _beast.match_result_R32_set)
    R33 = property(_beast.match_result_R33_get, _beast.match_result_R33_set)
    match = property(_beast.match_result_match_get, _beast.match_result_match_set)
    dec = property(_beast.match_result_dec_get, _beast.match_result_dec_set)
    ra = property(_beast.match_result_ra_get, _beast.match_result_ra_set)
    ori = property(_beast.match_result_ori_get, _beast.match_result_ori_set)

    def __init__(self, db_: "constellation_db", img_: "constellation_db", img_mask_: "star_fov"):
        _beast.match_result_swiginit(self, _beast.new_match_result(db_, img_, img_mask_))
    __swig_destroy__ = _beast.delete_match_result

    def size(self) -> "size_t":
        return _beast.match_result_size(self)

    def init(self, db_const_: "constellation", img_const_: "constellation") -> "void":
        return _beast.match_result_init(self, db_const_, img_const_)

    def copy_over(self, c: "match_result") -> "void":
        return _beast.match_result_copy_over(self, c)

    def related(self, m: "constellation_pair") -> "int":
        return _beast.match_result_related(self, m)

    def search(self) -> "void":
        return _beast.match_result_search(self)

    def clear_search(self) -> "void":
        return _beast.match_result_clear_search(self)

    def compute_score(self) -> "void":
        return _beast.match_result_compute_score(self)

    def from_match(self) -> "star_db *":
        return _beast.match_result_from_match(self)

    def weighted_triad(self) -> "void":
        return _beast.match_result_weighted_triad(self)

    def DBG_(self, s: "char const *") -> "void":
        return _beast.match_result_DBG_(self, s)

    def calc_ori(self) -> "void":
        return _beast.match_result_calc_ori(self)

    def get_dec(self) -> "double":
        return _beast.match_result_get_dec(self)

    def get_ra(self) -> "double":
        return _beast.match_result_get_ra(self)

    def get_ori(self) -> "double":
        return _beast.match_result_get_ori(self)

# Register match_result in _beast:
_beast.match_result_swigregister(match_result)

class db_match(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p_match = property(_beast.db_match_p_match_get, _beast.db_match_p_match_set)
    winner = property(_beast.db_match_winner_get, _beast.db_match_winner_set)

    def __init__(self, db: "constellation_db", img: "constellation_db"):
        _beast.db_match_swiginit(self, _beast.new_db_match(db, img))
    __swig_destroy__ = _beast.delete_db_match

# Register db_match in _beast:
_beast.db_match_swigregister(db_match)



